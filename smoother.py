
import casadi as ca
import matplotlib.pyplot as plt
import numpy as np


class path_smoother:
    def __init__(self, ref_p):
        '''
        func: smooth the raw path
        :param ref_p:the reference path point
        '''
        # self.P = P
        # self.Q = Q
        self.ref_p = ref_p
        self.N = len(self.ref_p)
        self.N_slack = self.N - 2
        self.N_variable = self.N + self.N_slack
        self.lbx = []
        self.ubx = []
        self.variable = []
        self.constrains = []
        self.lbg = []
        self.ubg = []

        self.lb = 2
        self.ub = 2
        self.x0 = []

        self.ave_length = 0
        self.cur_limit = 0.2
    # def initialize(self):
    def build_model(self):
        '''
        func:build the nolinear model and construct the variable
        :return:
        '''
        self.x = ca.SX.sym('x',2,self.N)
        self.s = ca.SX.sym('slack',self.N_slack)
        self.obj = 0

        diff_p = np.diff(self.ref_p,axis=0)
        self.ave_length = np.sum(np.sqrt(diff_p[:,0]**2 + diff_p[:,1] **2))/(self.N-1)


    def generate_obj(self):
        '''
        func: generate the objective func of path smoother
        :return:
        '''
        for i in range(1,self.N-1):
            x_0 = self.x[:,i-1]
            x_1 = self.x[:,i]
            x_2 = self.x[:,i+1]
            # latex term
            # cost += \sum_{i = 1} ^ {n - 1}((x_{i-1} + x_{i+1} - 2 * x_i) ^ 2 + (y_{i-1} + y_{i+1} - 2 * y_i) ^ 2)
            smooth_term = x_0 + x_2 - 2*x_1
            self.obj += smooth_term.T @ smooth_term * 1000
            # self.obj += (
            #             (x_0[0] + x_1[0] - 2*x_2[0])**2 +
            #              (x_0[1] + x_1[1] - 2*x_2[1])**2
            # )

            # cost+= \sum_{i=1}^{n-1} ((x_i - x_{i+1})^2 + (y_i-y_{i+1})^2)
            length_term = x_1-x_2
            self.obj += length_term.T @ length_term*0
            # cost+= \sum_{i=1}^{n-1} ((x_i - x_{ref})^2 + (y_i-y_{ref})^2)
            ref_term = x_1 - self.ref_p[i]
            self.obj += ref_term.T@ref_term

            self.obj += self.s[i-1]* 1000
    def generate_variable(self):
        '''
        func: generate the raw variable to be optimized
        :return:
        '''
        self.variable += [self.x[:, 0]]
        self.lbx += [self.ref_p[0].tolist()]
        self.ubx += [self.ref_p[0].tolist()]
        self.x0  += [self.ref_p[0].tolist()]
        self.variable += [self.x[:, 1]]
        self.lbx += [self.ref_p[1].tolist()]
        self.ubx += [self.ref_p[1].tolist()]
        self.x0  += [self.ref_p[1].tolist()]
        for i in range(2,self.N-2):
            self.variable += [self.x[:,i]]
            self.lbx += [(self.ref_p[i] - self.lb).tolist()]
            self.ubx += [(self.ref_p[i] + self.ub).tolist()]
            self.x0 += [self.ref_p[i].tolist()]

        self.variable += [self.x[:, self.N - 2]]
        self.lbx += [self.ref_p[self.N - 2].tolist()]
        self.ubx += [self.ref_p[self.N - 2].tolist()]
        self.x0 += [self.ref_p[self.N - 2]]

        self.variable += [self.x[:, self.N-1]]
        self.lbx += [self.ref_p[self.N-1].tolist()]
        self.ubx += [self.ref_p[self.N-1].tolist()]
        self.x0 += [self.ref_p[self.N-1]]
        for i in range(1, self.N - 1):
            self.variable += [self.s[i - 1]]
            self.lbx += [0]
            self.ubx += [1e5]
            self.x0 += [0.0]

    def generate_constraint(self):
        '''
        func: generative the constraint of smooth term
        :return:
        todo: replace the nonlinear curvature constraint with linear constraint
        '''
        for i in range(1, self.N - 1):
            x_0 = self.x[:, i - 1]
            x_1 = self.x[:, i]
            x_2 = self.x[:, i + 1]
            # latex function
            # cost += \sum_{i = 1} ^ {n - 1}((x_{i-1} + x_{i+1} - 2 * x_i) ^ 2 + (y_{i-1} + y_{i+1} - 2 * y_i) ^ 2)
            smooth_term = x_0 + x_2 - 2 * x_1
            self.constrains +=[smooth_term[0]**2 + smooth_term[1]**2 - self.s[i-1]]
            self.lbg += [-1e10]
            self.ubg += [(self.ave_length**2 * self.cur_limit)**2]
    def solve(self):
        '''
        solve the nonlinear problem
        :return:
        '''
        self.build_model()
        self.generate_variable()
        self.generate_constraint()
        self.generate_obj()
        nlp_prob = {'f': self.obj, 'x': ca.vertcat(*self.variable),
                    'g': ca.vertcat(*self.constrains)}
        # 构造求解器 选择求解其为ipopt
        solver = ca.nlpsol('solver', 'ipopt', nlp_prob)

        sol = solver(x0=ca.vertcat(*self.x0), lbx=ca.vertcat(*self.lbx), ubx=ca.vertcat(*self.ubx),ubg=self.ubg, lbg=self.lbg)

        res = sol['x']
        # optimized = [res[:2]]
        # for i in range(0, self.N - 2):
        #     temp = res[2 + i * 3: 2 + (i + 1) * 3]
        #     optimized.append(temp[:2])
        # optimized.append(res[-2:])
        optimized = res[:2*self.N].toarray().reshape(self.N,2)

        return optimized


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    # points_x = [1.0, 1.5, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.5, 2.9, 3.3, 3.8]
    # points_y = [0.0, 0.3, 0.5, 0.9, 1.2, 1.5, 1.9, 2.2, 2.2, 2.2, 2.2, 2.2]
    # points = np.vstack([points_x,points_y]).T

    points = np.array([[2.7, 72.9],
                       [3.05355369, 72.54644734],
                       [3.62532861, 72.05834742],
                       [4.12371707, 71.63289439],
                       [4.57501035, 71.24764452],
                       [4.99608064, 70.88819475],
                       [5.39775555, 70.54530198],
                       [5.78698364, 70.21303458],
                       [6.16822406, 69.88758593],
                       [6.54433847, 69.56651321],
                       [6.91716329, 69.24824874],
                       [7.28787704, 68.93178654],
                       [7.65723603, 68.61648104],
                       [8.02572562, 68.30191803],
                       [8.39365727, 67.9878318],
                       [8.76123087, 67.67405199],
                       [9.1285747, 67.36046954],
                       [9.49577107, 67.04701483],
                       [9.8628728, 66.73364381],
                       [10.22991381, 66.42032917],
                       [10.59691583, 66.10705487],
                       [10.96389283, 65.79381293],
                       [11.33085377, 65.48060186],
                       [11.69780438, 65.16742632],
                       [12.06474833, 64.85429811],
                       [12.43168796, 64.54123845],
                       [12.79862475, 64.22828232],
                       [13.16555962, 63.91548537],
                       [13.53249307, 63.6029351],
                       [13.89942536, 63.29076835],
                       [14.26635649, 62.97919864],
                       [14.63328623, 62.66855893],
                       [15.00021409, 62.35936817],
                       [15.36713917, 62.05243507],
                       [15.73406006, 61.74901993],
                       [16.10097446, 61.45108658],
                       [16.46787882, 61.16169526],
                       [16.83476754, 60.88561457],
                       [17.20163192, 60.63027528],
                       [17.56845838, 60.40725641],
                       [17.93522576, 60.20490264],
                       [18.30190107, 60.01569167],
                       [18.66843292, 59.83472974],
                       [19.03474121, 59.65877292],
                       [19.40070116, 59.4855783],
                       [19.76611828, 59.31345539],
                       [20.13068954, 59.14092808],
                       [20.49394274, 58.96643933],
                       [20.85514204, 58.78803986],
                       [21.21314086, 58.60299821],
                       [21.56615249, 58.40725451],
                       [21.9113928, 58.19460846],
                       [22.2445234, 57.95547931],
                       [22.55878394, 57.67498988],
                       [22.84364007, 57.32999093],
                       [23.08267655, 56.94359348],
                       [23.27109405, 56.53062888],
                       [23.39396941, 56.10061502],
                       [23.47478346, 55.65965995],
                       [23.52860479, 55.21168348],
                       [23.56510342, 54.75920113],
                       [23.59048485, 54.30382727],
                       [23.60873113, 53.84659792],
                       [23.62239728, 53.38817806],
                       [23.63312231, 52.92899452],
                       [23.64195698, 52.46932142],
                       [23.649574, 52.00933497],
                       [23.65640254, 51.54914869],
                       [23.66271409, 51.08883615],
                       [23.66867671, 50.62844567],
                       [23.67438871, 50.16800997],
                       [23.67989825, 49.70755272],
                       [23.68521301, 49.24709331],
                       [23.69030172, 48.78665067],
                       [23.69508788, 48.32624709],
                       [23.69943451, 47.86591268],
                       [23.70311669, 47.40569138],
                       [23.70577665, 46.94564975],
                       [23.70685222, 46.48589028],
                       [23.70546441, 46.0265719],
                       [23.70024158, 45.56794174],
                       [23.68904514, 45.11038458],
                       [23.67362307, 44.65449981],
                       [23.65487822, 44.1998482],
                       [23.63304891, 43.74623716],
                       [23.60775653, 43.29368221],
                       [23.57792988, 42.84241008],
                       [23.5415909, 42.39290409],
                       [23.49545907, 41.94600076],
                       [23.43429528, 41.50305715],
                       [23.34985407, 41.06622227],
                       [23.22923445, 40.63886687],
                       [23.05229977, 40.2262576],
                       [22.78765038, 39.83661031],
                       [22.46671071, 39.48273319],
                       [22.10964717, 39.15221712],
                       [21.72940142, 38.83732517],
                       [21.33427867, 38.53344523],
                       [20.92960874, 38.23816756],
                       [20.51881201, 37.95080287],
                       [20.1040835, 37.67224449],
                       [19.68683186, 37.40514699],
                       [19.26796113, 37.15445711],
                       [18.84805153, 36.92840314],
                       [18.42747551, 36.74014054],
                       [18.00647222, 36.57612932],
                       [17.58519538, 36.42767978],
                       [17.16374399, 36.28921454],
                       [16.74218212, 36.15715309],
                       [16.32055178, 36.02919567],
                       [15.89888126, 35.90386334],
                       [15.47719082, 35.78020217],
                       [15.05549675, 35.65759245],
                       [14.63381458, 35.53562478],
                       [14.21216227, 35.41401815],
                       [13.79056371, 35.29256378],
                       [13.36905356, 35.17108331],
                       [12.94768416, 35.04939321],
                       [12.52653598, 34.92726797],
                       [12.10573377, 34.80439509],
                       [11.68547145, 34.68031252],
                       [11.26605092, 34.55431628],
                       [10.84794245, 34.42531966],
                       [10.4318787, 34.29163586],
                       [10.01900129, 34.15064067],
                       [9.61108912, 33.99824759],
                       [9.21091411, 33.82809052],
                       [8.82279563, 33.63025059],
                       [8.45346434, 33.38927236],
                       [8.11340836, 33.08107271],
                       [7.81897087, 32.72476741],
                       [7.59561872, 32.32985106],
                       [7.4231336, 31.8980961],
                       [7.2914706, 31.44270023],
                       [7.19874921, 30.97213299],
                       [7.13101829, 30.49182964],
                       [7.07932483, 30.00527822],
                       [7.03792328, 29.51471714],
                       [7.00312652, 29.02158291],
                       [6.97256832, 28.52679739],
                       [6.94473022, 28.03095218],
                       [6.91863776, 27.53442696],
                       [6.89366558, 27.03746538],
                       [6.86941242, 26.54022386],
                       [6.84562081, 26.04280278],
                       [6.82212556, 25.54526666],
                       [6.7988208, 25.04765697],
                       [6.77563872, 24.5500005],
                       [6.75253606, 24.05231466],
                       [6.72948546, 23.554611],
                       [6.70646993, 23.05689751],
                       [6.68347953, 22.55918019],
                       [6.66050935, 22.06146429],
                       [6.63755849, 21.56375537],
                       [6.61462994, 21.06606034],
                       [6.59173114, 20.56838893],
                       [6.56887549, 20.07075556],
                       [6.54608502, 19.57318228],
                       [6.52339478, 19.07570315],
                       [6.50085989, 18.57837107],
                       [6.47856652, 18.08126832],
                       [6.45664915, 17.5845231],
                       [6.43531745, 17.08833506],
                       [6.41489826, 16.59301532],
                       [6.39590089, 16.09904866],
                       [6.37911901, 15.60719045],
                       [6.3657894, 15.11861779],
                       [6.35783931, 14.63516486],
                       [6.35827187, 14.1596898],
                       [6.37176674, 13.69664632],
                       [6.40561606, 13.25297443],
                       [6.47118285, 12.8394885],
                       [6.58617362, 12.47304004],
                       [6.77817968, 12.1798881],
                       [7.0901954, 12.000951],
                       [7.58921708, 11.99999005]])

    points = np.array([[2.70000000e+00, 7.29000000e+01, -7.85396590e-01],
           [2.70000000e+00, 7.21000000e+01, -7.85396590e-01],
           [3.40710725e+00, 7.21928944e+01, -7.85397885e-01],
           [3.76066055e+00, 7.18393407e+01, -7.85399503e-01],
           [4.11421344e+00, 7.14857861e+01, -7.85401705e-01],
           [4.46776601e+00, 7.11322308e+01, -7.85401971e-01],
           [4.82131886e+00, 7.07786761e+01, -7.85399000e-01],
           [5.17487267e+00, 7.04251237e+01, -7.85392791e-01],
           [5.52842807e+00, 7.00715752e+01, -7.85384371e-01],
           [5.88198445e+00, 6.97180290e+01, -7.85385102e-01],
           [6.23553941e+00, 6.93644794e+01, -7.85398132e-01],
           [6.58909039e+00, 6.90109202e+01, -7.85423462e-01],
           [6.94263519e+00, 6.86573460e+01, -7.85452443e-01],
           [7.29617769e+00, 6.83037663e+01, -7.85441497e-01],
           [7.64972720e+00, 6.79502036e+01, -7.85384587e-01],
           [8.00329326e+00, 6.75966808e+01, -7.85281707e-01],
           [8.35688249e+00, 6.72432140e+01, -7.85190260e-01],
           [8.71047442e+00, 6.68897537e+01, -7.85262252e-01],
           [9.06403370e+00, 6.65362145e+01, -7.85505791e-01],
           [9.41752481e+00, 6.61825107e+01, -7.85920772e-01],
           [9.77093321e+00, 6.58286070e+01, -7.86172541e-01],
           [1.01243550e+01, 6.54747358e+01, -7.85787808e-01],
           [1.04779228e+01, 6.51212172e+01, -7.84762535e-01],
           [1.08317690e+01, 6.47683711e+01, -7.83107312e-01],
           [1.11858911e+01, 6.44161917e+01, -7.82587283e-01],
           [1.15398733e+01, 6.40636742e+01, -7.84460697e-01],
           [1.18932210e+01, 6.37096239e+01, -7.88716442e-01],
           [1.22454473e+01, 6.33528644e+01, -7.94916133e-01],
           [1.25968360e+01, 6.29940811e+01, -7.95230622e-01],
           [1.29490820e+01, 6.26373691e+01, -7.86670020e-01],
           [1.33040312e+01, 6.22871881e+01, -7.69043977e-01],
           [1.36633944e+01, 6.19476709e+01, -7.46446743e-01],
           [1.40249576e+01, 6.16134688e+01, -7.51449437e-01],
           [1.43820699e+01, 6.12685135e+01, -7.90040885e-01],
           [1.47278421e+01, 6.08961613e+01, -8.59013768e-01],
           [1.50567739e+01, 6.04831231e+01, -9.24877578e-01],
           [1.53815406e+01, 6.00600222e+01, -8.88734977e-01],
           [1.57275877e+01, 5.96883341e+01, -7.27563721e-01],
           [1.61206261e+01, 5.94301747e+01, -4.01911742e-01],
           [1.65807967e+01, 5.93341848e+01, -4.79305975e-02],
           [1.70891580e+01, 5.93544499e+01, 9.50252273e-02],
           [1.76100445e+01, 5.94045941e+01, 7.14410193e-02],
           [1.81175070e+01, 5.94220062e+01, 1.56335205e-03],
           [1.86133113e+01, 5.94118579e+01, -3.70208825e-02],
           [1.91041293e+01, 5.93912587e+01, -4.08407033e-02],
           [1.95977101e+01, 5.93777749e+01, -7.80509831e-03],
           [2.01031440e+01, 5.93895420e+01, 5.91231671e-02],
           [2.06263891e+01, 5.94381204e+01, 1.04576644e-01],
           [2.11420247e+01, 5.94705620e+01, -1.07498456e-02],
           [2.16069129e+01, 5.93974975e+01, -3.51156342e-01],
           [2.19928723e+01, 5.91570214e+01, -7.24925843e-01],
           [2.23294643e+01, 5.87934297e+01, -8.88843670e-01],
           [2.26600002e+01, 5.83763066e+01, -8.88292375e-01],
           [2.30276450e+01, 5.79750905e+01, -7.50922265e-01],
           [2.34437403e+01, 5.76274523e+01, -6.64411119e-01],
           [2.38481970e+01, 5.72997595e+01, -7.24424420e-01],
           [2.41711943e+01, 5.69486646e+01, -9.69160519e-01],
           [2.43443798e+01, 5.65316159e+01, -1.38907342e+00],
           [2.43640598e+01, 5.60410863e+01, -1.62870671e+00],
           [2.43152036e+01, 5.55175759e+01, -1.67070489e+00],
           [2.42831412e+01, 5.50021470e+01, -1.59229681e+00],
           [2.42859484e+01, 5.45034979e+01, -1.54570727e+00],
           [2.42997736e+01, 5.40101508e+01, -1.54821386e+00],
           [2.43049921e+01, 5.35126619e+01, -1.57009143e+00],
           [2.43026653e+01, 5.30115422e+01, -1.57859155e+00],
           [2.42993242e+01, 5.25099346e+01, -1.57467046e+00],
           [2.42987167e+01, 5.20096425e+01, -1.56993036e+00],
           [2.42996040e+01, 5.15100694e+01, -1.56869662e+00],
           [2.43003007e+01, 5.10104037e+01, -1.57023402e+00],
           [2.43002948e+01, 5.05104000e+01, -1.57122568e+00],
           [2.43000275e+01, 5.00102726e+01, -1.57127972e+00],
           [2.42999011e+01, 4.95102159e+01, -1.57084988e+00],
           [2.42999349e+01, 4.90102340e+01, -1.57064652e+00],
           [2.43000118e+01, 4.85102629e+01, -1.57067445e+00],
           [2.43000463e+01, 4.80102636e+01, -1.57077959e+00],
           [2.43000290e+01, 4.75102567e+01, -1.57088178e+00],
           [2.42999634e+01, 4.70102697e+01, -1.57095570e+00],
           [2.42999043e+01, 4.65102923e+01, -1.57083610e+00],
           [2.42999608e+01, 4.60102743e+01, -1.57049318e+00],
           [2.43002005e+01, 4.55101820e+01, -1.57026712e+00],
           [2.43003418e+01, 4.50101257e+01, -1.57091004e+00],
           [2.42999376e+01, 4.45102843e+01, -1.57243706e+00],
           [2.42989856e+01, 4.40106603e+01, -1.57240505e+00],
           [2.42988902e+01, 4.35106983e+01, -1.56901114e+00],
           [2.43012600e+01, 4.30097616e+01, -1.56342112e+00],
           [2.43045120e+01, 4.25084759e+01, -1.56728234e+00],
           [2.43026868e+01, 4.20091975e+01, -1.58377336e+00],
           [2.42910612e+01, 4.15137938e+01, -1.59928822e+00],
           [2.42821497e+01, 4.10173171e+01, -1.57045277e+00],
           [2.42992127e+01, 4.05105710e+01, -1.49741250e+00],
           [2.43483145e+01, 3.99911577e+01, -1.48262975e+00],
           [2.43616703e+01, 3.94858773e+01, -1.63983986e+00],
           [2.42524000e+01, 3.90290892e+01, -2.00237114e+00],
           [2.39830975e+01, 3.86365099e+01, -2.31045525e+00],
           [2.36050101e+01, 3.82904490e+01, -2.46685592e+00],
           [2.31786046e+01, 3.79697419e+01, -2.50967258e+00],
           [2.27631990e+01, 3.76534092e+01, -2.46090911e+00],
           [2.23861631e+01, 3.73256254e+01, -2.38957174e+00],
           [2.20395047e+01, 3.69762697e+01, -2.31514997e+00],
           [2.17133980e+01, 3.65955169e+01, -2.24450662e+00],
           [2.13975156e+01, 3.61766522e+01, -2.20251426e+00],
           [2.10751599e+01, 3.57524519e+01, -2.25596635e+00],
           [2.07252533e+01, 3.53828470e+01, -2.42619865e+00],
           [2.03266321e+01, 3.51283028e+01, -2.75141059e+00],
           [1.98633349e+01, 3.50354781e+01, -3.09819749e+00],
           [1.93549801e+01, 3.50566102e+01, 3.04745198e+00],
           [1.88360618e+01, 3.51044583e+01, 3.07760044e+00],
           [1.83308036e+01, 3.51177537e+01, -3.13681653e+00],
           [1.78348624e+01, 3.51074877e+01, -3.11277582e+00],
           [1.73391420e+01, 3.50966742e+01, -3.13077481e+00],
           [1.68395703e+01, 3.50956048e+01, 3.13715616e+00],
           [1.63381971e+01, 3.50990685e+01, 3.13425398e+00],
           [1.58372619e+01, 3.51013813e+01, 3.13975593e+00],
           [1.53372859e+01, 3.51012845e+01, -3.13976920e+00],
           [1.48378410e+01, 3.50999627e+01, -3.13852737e+00],
           [1.43384479e+01, 3.50986442e+01, -3.13981398e+00],
           [1.38384737e+01, 3.50986215e+01, 3.13947235e+00],
           [1.33372714e+01, 3.51011584e+01, 3.13379984e+00],
           [1.28355716e+01, 3.51046948e+01, 3.13742481e+00],
           [1.23362920e+01, 3.51031875e+01, -3.12916664e+00],
           [1.18419405e+01, 3.50914481e+01, -3.11145049e+00],
           [1.13468040e+01, 3.50813475e+01, -3.13905980e+00],
           [1.08392347e+01, 3.50970713e+01, 3.07065119e+00],
           [1.03147961e+01, 3.51478286e+01, 3.04682047e+00],
           [9.80593502e+00, 3.51662314e+01, -3.08360985e+00],
           [9.35648907e+00, 3.50611979e+01, -2.69758839e+00],
           [8.98421468e+00, 3.47897472e+01, -2.36662214e+00],
           [8.65249016e+00, 3.44091887e+01, -2.24027424e+00],
           [8.31789405e+00, 3.39893727e+01, -2.27076533e+00],
           [7.93826810e+00, 3.35988865e+01, -2.42007054e+00],
           [7.51887079e+00, 3.32589008e+01, -2.47737204e+00],
           [7.12559647e+00, 3.29299514e+01, -2.38356645e+00],
           [6.82829671e+00, 3.25686165e+01, -2.09383332e+00],
           [6.69137054e+00, 3.21344308e+01, -1.68228798e+00],
           [6.69348496e+00, 3.16334128e+01, -1.49003457e+00],
           [6.74512321e+00, 3.11085494e+01, -1.48304775e+00],
           [6.76839034e+00, 3.05973465e+01, -1.56281544e+00],
           [6.76127128e+00, 3.01007743e+01, -1.59950449e+00],
           [6.74819539e+00, 2.96070701e+01, -1.58770286e+00],
           [6.74508733e+00, 2.91085664e+01, -1.56864657e+00],
           [6.74816003e+00, 2.86070869e+01, -1.56287537e+00],
           [6.75101215e+00, 2.81057143e+01, -1.56819489e+00],
           [6.75116396e+00, 2.76056419e+01, -1.57220898e+00],
           [6.75018624e+00, 2.71061120e+01, -1.57271150e+00],
           [6.74965518e+00, 2.66063648e+01, -1.57107678e+00],
           [6.74975362e+00, 2.61063156e+01, -1.57027801e+00],
           [6.75001794e+00, 2.56061935e+01, -1.57040914e+00],
           [6.75010480e+00, 2.51061636e+01, -1.57079887e+00],
           [6.75005261e+00, 2.46061897e+01, -1.57096534e+00],
           [6.74997214e+00, 2.41061985e+01, -1.57092213e+00],
           [6.74993715e+00, 2.36061749e+01, -1.57080362e+00],
           [6.74997170e+00, 2.31061820e+01, -1.57064396e+00],
           [6.75008474e+00, 2.26062736e+01, -1.57054454e+00],
           [6.75015986e+00, 2.21063474e+01, -1.57081222e+00],
           [6.75000420e+00, 2.16062052e+01, -1.57146733e+00],
           [6.74957617e+00, 2.11057966e+01, -1.57158478e+00],
           [6.74946690e+00, 2.06056904e+01, -1.57019226e+00],
           [6.75041745e+00, 2.01066020e+01, -1.56757567e+00],
           [6.75195113e+00, 1.96080756e+01, -1.56881093e+00],
           [6.75145668e+00, 1.91076009e+01, -1.57567508e+00],
           [6.74655941e+00, 1.86028951e+01, -1.58345921e+00],
           [6.74199845e+00, 1.80985120e+01, -1.57269936e+00],
           [6.74817064e+00, 1.76044433e+01, -1.53979585e+00],
           [6.76980904e+00, 1.71252375e+01, -1.52499959e+00],
           [6.77894941e+00, 1.66340213e+01, -1.59086174e+00],
           [6.73629948e+00, 1.60930358e+01, -1.70931591e+00],
           [6.62298244e+00, 1.54842870e+01, -1.78845230e+00],
           [6.46731426e+00, 1.48354696e+01, -1.81695061e+00],
           [6.30425473e+00, 1.41807106e+01, -1.80630755e+00],
           [6.16876366e+00, 1.35541369e+01, -1.75187612e+00],
           [6.09580084e+00, 1.29898753e+01, -1.62832088e+00],
           [6.12032607e+00, 1.25220526e+01, -1.36569413e+00],
           [6.27729915e+00, 1.21847959e+01, -8.37320355e-01],
           [6.60167987e+00, 1.20122319e+01, -1.85672737e-01],
           [7.09019540e+00, 1.20009510e+01, 2.56652526e-03],
           [7.58921708e+00, 1.19999901e+01, 1.56077661e-03]])

    smoother = path_smoother(points[:,:2])
    optimized_points = np.array(smoother.solve())
    plt.plot(points[:,0],points[:,1],label='raw')
    plt.plot(optimized_points[:,0],optimized_points[:,1],label='optimized')
    plt.legend()
    plt.show()
    # print(smoother.ave_length)

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
